%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Hybrid and Embedded control systems
% Homework 1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Initialization
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%
clear all, close all, clc
init_tanks;
g = 9.82;
Tau = 1/alpha1*sqrt(2*tank_h10/g);
K = 60*beta*Tau;
Gamma = alpha1^2/alpha2^2;
simtime = 200;

s = tf('s');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Continuous Control design
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
uppertank=tf([K],[Tau 1]);          % Transfer function for upper tank
lowertank=tf([Gamma],[Gamma*Tau 1]); % Transfer function for upper tank
G=lowertank*uppertank; % Transfer function from input to lower tank level

% CalculatePID paramaeters
chi = 0.5;
omega0 = 0.2;
zeta = 0.8;

[K_pid, Ti, Td, N] = polePlacePID(chi, omega0, zeta, Tau, Gamma, K)

F = K_pid*(1 + 1/(Ti*s) + Td*N*s/(N + s)); % Transfer function for the controller

Go = F*G;
Gc = F*G/(1 + F*G); % Closed system
ZOH = 0.92*4;

figure(1)
step(Gc)
title('Step function of closed system')
figure(2)
bode(Gc)
figure(3)
pzmap(Gc)
stepinfo(Gc)

sim('tanks')
figure(4)
subplot(4,1,1)
plot(ref.Time, ref.Data)
title('Ref')
subplot(4,1,2)
plot(h1.Time, h1.Data)
title('h1')
subplot(4,1,3)
plot(h2.Time, h2.Data)
title('h2')
subplot(4,1,4)
plot(pump.Time, pump.Data)
title('Pump')



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Digital Control design
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<<<<<< HEAD
Ts = 4  ; % Sampling time

% Discretize the continous controller, save it in state space form
% [Aa,Ba,Ca,Da] = ; 
% Run several times over different sampling frequencies
% Figure 5 contains all h1 data
% Figure 6 contains all h2 data
% Figure 7 contains all pump data
% Loop over different sampling times and print performance
for i = 1:length(Ts)
    F_dg = c2d(F, Ts, 'zoh');
    [Ad,Bd,Cd,Dd] = tf2ss(F_dg.num{1}, F_dg.den{1});
    % Simulate system
    sim('tanks_discrete')
    % Plot the simulated data
    figure(5)
    subplot(length(Ts),1,i)
    title('
    subplot(4,1,2)
    plot(h1_d.Time, h1_d.Data)
    title('h1_d')
    subplot(4,1,3)
    plot(h2_d.Time, h2_d.Data)
    title('h2_d')
    subplot(4,1,4)
    plot(pump_d.Time, pump_d.Data)
    title('Pump_d')
end

%%%% Plot both discrete and continuous h2 in same plot
figure
plot(h2.Time, h2.Data);
hold on
plot(h2_d.Time, h2_d.Data);
legend('Continuous', 'Discrete')
=======
 Ts = 4; % Sampling time
% 
% % Discretize the continous controller, save it in state space form
% % [Aa,Ba,Ca,Da] = ; 
% F_dg = c2d(F, Ts, 'zoh');
% [Ad,Bd,Cd,Dd] = tf2ss(F_dg.num{1}, F_dg.den{1});
% % Plot 
% sim('tanks_discrete')
% figure
% subplot(4,1,1)
% plot(ref_d.Time, ref_d.Data)
% title('Ref_d')
% subplot(4,1,2)
% plot(h1_d.Time, h1_d.Data)
% title('h1_d')
% subplot(4,1,3)
% plot(h2_d.Time, h2_d.Data)
% title('h2_d')
% subplot(4,1,4)
% plot(pump_d.Time, pump_d.Data)
% title('Pump_d')
% 
% %%%% Plot both discrete and continuous h2 in same plot
% figure
% plot(h2.Time, h2.Data);
% hold on
% plot(h2_d.Time, h2_d.Data);
% legend('Continuous', 'Discrete')
>>>>>>> 630c07ab90f7c7568bdd7ffd396fa293fb894a23


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Discrete Control design
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clc; %Remove this

Gd = c2d(G, Ts, 'zoh') % Sampled system model
Fd = 1;% c2d(F, Ts, 'zoh'); % Transfer function for discrete designed controller

%Gets and prints ai and bi for q 12
fprintf('Question 12\n\n')
counter = 0;
for i = Gd.num{1}
    fprintf('a%d = %d\n',counter,i)
    counter = counter +1;
end
counter = 1;
for i = Gd.den{1}
    fprintf('b%d = %d\n',counter,i)
    counter = counter +1;
end

fprintf('Question 13\n\n')
fprintf('Within the unit circle\n\n')

%Gdpoles = pole(Gd); %Using built in function to calculate poles
%exp(Ts*Gpoles(1)) %Numerically calculate poles. The build-in gives the same results. 
%Gdc = Fd*Gd/(1 + Fd*Gd); % Closed system
fprintf('Question 14\n\n')

Gcminimized = minreal(Gc); %Remove unecessary poles
Gcdiscretepoles = pole(Gcminimized); %Get the poles
fprintf('Gc discrete poles:\n');
for i = 1:length(Gcdiscretepoles) 
    Gcdiscretepoles(i) = exp(Ts*Gcdiscretepoles(i)); %Covert to discrete poles
end
%Gcpoles = pole(minimized);
% minimized.den{1}(2);
Gcdiscretepoles
A = [Gcdiscretepoles(1) 0 0 0; 0 Gcdiscretepoles(2) 0 0; 0 0 Gcdiscretepoles(3) 0; 0 0 0 Gcdiscretepoles(4)]; %prepare matrix
polyied = poly(A); %Create polynomial which is our d-values in q14
for i = 1:length(polyied)
    fprintf('d%d: %d\n', i-2, polyied(i))
end

fprintf('\nQuestion 15\n\n')
fprintf('Symbolically set up the digital closed loop system\n')
fprintf('Calculate so this system gets the same poles as resulting in q 14\n')
a1 = Gd.num{1}(2);
a2 = Gd.num{1}(3);
b1 = Gd.den{1}(2);
b2 = Gd.den{1}(3);
d0 = polyied(2);
d1 = polyied(3);
d2 = polyied(4);
d3 = polyied(5);

A = [1 a1 0 0;
     b1-1 a2 a1 0;
     b2-b1 0 a2 a1;
     -b2 0 0 a2];
 B = [d0-b1+1;
     d1-b2+b1;
     d2+b2;
     d3];
C = A\B;
r = C(1);
c0 = C(2);
c1 = C(3);
c2 = C(4);
fprintf('Constants for Fd are:\n')
fprintf('r = %d\n', r);
fprintf('c0 = %d\n', c0);
fprintf('c1 = %d\n', c1);
fprintf('c2 = %d\n', c2);
fprintf('\n');

fprintf('Question 16\n\n');
Fd = filt([c0 c1 c2], [1 r-1 r], Ts);
Gdo = Gd*Fd;
Gdc = Gd*Fd/(1+ Gd*Fd);
figure
step(Gdc)
figure;
step(Gc)
figure
pzmap(Gdc)
figure
pzmap(Gc)
pole(minreal(Gdc))
pole(minreal(Gc))
exp(Ts*pole(minreal(Gc)))
